#pragma kernel WaveKernel
#pragma kernel RippleKernel

RWStructuredBuffer<float3> _Positions;

uint _Resolution;

float _Step, _Time;

float2 GetUV (uint3 id) {
	return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition (uint3 id, float3 position) {
	if(id.x < _Resolution && id.y < _Resolution) {
		_Positions[id.x + id.y * _Resolution] = position;
	}
}

#define PI 3.14159265358979323846

float3 Wave (float u, float v, float t) {
	float3 p;
	p.x = u;
	p.y = 0.05 * sin(PI * (u + v + t)) - 0.1f;
	p.z = v;
	return p;
}

float3 Ripple (float u, float v, float t) {
	float d = sqrt(u * u + v * v);
	float3 p;
	p.x = u;
	p.y = sin(PI * (4.0 * d - t));
	p.y /= 1 + 120.0 * d;
	p.y -= 0.1;
	p.z = v;
	return p;
}

#define KERNEL_FUNCTION(function) \ 
	[numthreads(8, 8, 1)] \ 
	void function##Kernel (uint3 id: SV_DispatchThreadID) { \
		float2 uv = GetUV(id); \
		SetPosition(id, function(uv.x, uv.y, _Time)); \
	}

KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(Ripple)
